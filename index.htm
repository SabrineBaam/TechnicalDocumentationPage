<html>
  <header>
    <title>Technical Documentation Page</title>
    <link rel="stylesheet" href="style.css" />
    <nav id="navbar" class="navbar">
      <header>Java Documentation</header>
      <ul>
         <li><a href="#introduction" class="nav-link">Introduction</a></li> 
         <li><a href="#what_you_should_already_know" class="nav-link">What you should already know</a></li>
         <li><a href="#java_and_javascript" class="nav-link">Java and JavaScript</a></li>
         <li><a href="#hello_world"class="nav-link" >Hello World</a></li>
         <li> <a href="#variables" class="nav-link">Variables</a></li>
         <li> <a href="#declaring_variables" class="nav-link">Declaring Variables</a></li>
         <li> <a href="#variable_scope" class="nav-link">Variable Scope</a></li>
         <li><a href="#global_variables" class="nav-link">Global Variables</a></li>
         <li> <a href="#constants" class="nav-link">Constants</a></li>
         <li> <a href="#data_types" class="nav-link">Data Types</a></li>
         <li><a href="#if...else_statement" class="nav-link">If...Else Statement</a></li>
         <li> <a href="#while_statement" class="nav-link" >While Statement</a></li>
         <li> <a href="#function_declarations"class="nav-link">Function Declarations</a></li>
         <li> <a href="#reference" class="nav-link">Reference</a></li>
      </ul>      
    </nav>
  </header>
  <body>
    <main id="main-doc">
    <section id="introduction" class="main-section">
      <header>Introduction</header>
        <p>
          Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA),[17] meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.[18] Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but it has fewer low-level facilities than either of them. As of 2019, Java was one of the most popular programming languages in use according to GitHub,[19][20] particularly for client-server web applications, with a reported 9 million developers.
        </p>
      </section>
    <section id="what_you_should_already_know" class="main-section">
      <header>What you should already know</header>
        <p>This guide assumes you have the following basic background:
          <ul>
            <li>A general understanding of programming</li>
            <li>Good knowledge about Data Structure and Algorithmes</li>
            <li>Some programming experience. If you are new to programming</li>
          </ul>
      </p>
      </section>
    <section id="java_and_javascript" class="main-section">
      <header>Java and JavaScript</header>
        <p>
          Java and JavaScript are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.
In contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.
JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.
        </p>
      </section>
    <section id="hello_world" class="main-section">
      <header>Hello World</header>
        <p>
          To get started with writing Java, open your editor (ex: Eclipse) and write your first "Hello world" Java code:
          <code> public static void main(String[] args) {
            System.out.println("Hello World!");
            }
          </code> <br>
          Press run and see the console.
        </p>
      </section>
    <section id="variables" class="main-section">
      <header>Variables</header>
        <p>A variable is a name given to a memory location. It is the basic unit of storage in a program.
      <ul>
        <li>The value stored in a variable can be changed during program execution.</li>
        <li>A variable is only a name given to a memory location, all the operations done on the variable effects that memory location.</li>
        <li>In Java, all the variables must be declared before use.</li>
      </ul>
      </p>
      </section>
    <section id="declaring_variables" class="main-section">
      <header>Declaring Variables</header>
        <p>
          We can declare variables in java as follows:
          <code>int variable;</code>
          <ul>
            <li>type: Type of data that can be stored in this variable.(which is int in the above example)</li>
            <li>name: Name given to the variable.(which is variable in the above example)</li>
          </ul>
        </p>
      </section>
    <section id="variable_scope" class="main-section">
      <header>Variable Scope</header>
        <p>There are three types of variables in Java:
          <ul>
            <li>Local Variables: A variable defined within a block or method or constructor is called local variable.
              <ul>
            <li>These variable are created when the block in entered or the function is called and destroyed after exiting from the block or when the call returns from the function.</li>
            <li>The scope of these variables exists only within the block in which the variable is declared. i.e. we can access these variable only within that block.</li>
            <li>Initilisation of Local Variable is Mandatory.</li>
              </ul>
            </li>
            <li>Instance variables are non-static variables and are declared in a class outside any method, constructor or block.
            <ul>
              <li>As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed.</li>
              <li>Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier then the default access specifier will be used.</li>
              <li>Initilisation of Instance Variable is not Mandatory. Its default value is 0</li>
              <li>Instance Variable can be accessed only by creating objects.</li>
            </ul></li>
            <li>Static variables are also known as Class variables
            <ul>
              <li>These variables are declared similarly as instance variables, the difference is that static variables are declared using the static keyword within a class outside any method constructor or block.</li>
              <li>Unlike instance variables, we can only have one copy of a static variable per class irrespective of how many objects we create.</li>
              <li>Static variables are created at the start of program execution and destroyed automatically when execution ends.</li>
              <li>Initilisation of Static Variable is not Mandatory. Its default value is 0</li>
              <li>If we access the static variable like Instance variable (through an object), the compiler will show the warning message and it wonâ€™t halt the program. The compiler will replace the object name to class name automatically.</li>
              <li>If we access the static variable without the class name, Compiler will automatically append the class name.</li>
            </ul></li>
          </ul>
      To access static variables, we need not create an object of that class, we can simply access the variable as:
      <code>class_name.variable_name;</code>
      </p>
      </section>
    <section id="global_variables" class="main-section">
      <header>Global Variables</header>
        <p>A global variable is one declared at the start of the code and is accessible to all parts of the program. Since Java is object-oriented, everything is part of a class. The intent is to protect data from being changed. A static variable can be declared, which can be available to all instances of a class.</p>
      </section>
    <section id="constants" class="main-section">
      <header>Constants</header>
        <p>
          A constant is an entity in computer programming where its value doesn't change. There are a number of different constant types in Java. They include; Integer Constants, Real Constants, Single Character Constants, String Constants, and Backslash Character Constants.
        </p>
      </section>
    <section id="data_types" class="main-section">
      <header>Data Types</header>
        <p>
          Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:
          <ul>
            <li>Primitive data types:
            <ul>
              <li>boolean</li>
              <li>byte</li>
              <li>short</li>
              <li>int</li>
              <li>long</li>
              <li>char</li>
              <li>float</li>
              <li>double</li>
            </ul></li>
            <li>Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays.</li>
          </ul>
        </p>
      </section>
    <section id="if...else_statement" class="main-section">
      <header>If...Else Statement</header>
        <p>
          Use the if statement to specify a block of Java code to be executed if a condition is true
          <code>if (condition) {
  // block of code to be executed if the condition is true
}</code>
          Use the else statement to specify a block of code to be executed if the condition is false
          <code>if (condition) {
  // block of code to be executed if the condition is true
} else {
  // block of code to be executed if the condition is false
}</code>
        </p>
      </section>
    <section id="while_statement" class="main-section">
      <header>While Statement</header>
        <p>The while statement evaluates expression, which must return a boolean value. If the expression evaluates to true, the while statement executes the statement(s) in the while block. The while statement continues testing the expression and executing its block until the expression evaluates to false. Using the while statement to print the values from 1 through 10 can be accomplished as in the following:
      <code>class WhileDemo {
    public static void main(String[] args){
        int count = 1;
        while (count < 11) {
            System.out.println("Count is: " + count);
            count++;
        }}}
</code></p>
      </section>
    <section id="function_declarations" class="main-section">
      <header>Function Declarations</header>
        <p>In Java, all function definitions must be inside classes. We also call functions methods. Let's look at an example method
      <code>public class Main {
    public static void foo() {
        // Do something here
    }
}</code>
  foo is a method we defined in class Main. Notice a few things about foo:
          <ul>
            <li>static means this method belongs to the class Main and not to a specific instance of Main. Which means we can call the method from a different class like that Main.foo().</li>
            <li>void means this method doesn't return a value. Methods can return a single value in Java and it has to be defined in the method declaration. However, you can use return by itself to exit the method.</li>
            <li>This method doesn't get any arguments, but of course Java methods can get arguments as we'll see further on.</li>
          </ul>
</p>
      </section>
    <section id="reference" class="main-section">
      <header>Reference</header>
        <p><ul><li>All the documentation in this page is taken from
      <a href="https://www.w3schools.com/">Here</a></li></ul></p>
      </section>
    </main>
    
   <!-- <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>-->
  </body>
</html>